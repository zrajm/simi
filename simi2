#!/usr/bin/env perl

use warnings FATAL => 'all';
use strict;
use 5.10.0;

our $VERSION       = "0.0.2";
our $YEAR          = "2014";
our ($NAME)        = __FILE__ =~ m#([^/]+)$#mx;
our ($PLAIN, $RED, $GREEN) = ("\e[m", "\e[31m", "\e[32m");

# FIXME: invert subdiffs (when should subdiffing be done?)

##############################################################################

# FIXME: add note about missing newline at end
sub read_file {
    my ($file) = @_;
    open my $in, $file or die "Cannot open file '$file' for reading: $!\n";
    my @data = <$in>;
    close $in, $file or die "Cannot close file '$file' after reading: $!\n";
    return wantarray
        ? do { s/\r?\n\z// foreach @data; @data }
        : join "", @data;
}

{
    package Local::Output;

    sub new {
        my ($class, %arg) = @_;
        return bless({
            '+'   => "",                       # ANSI terminal hilite strings
            '-'   => "",
            ""    => "",
            plain => "",
        }, $class)->set(%arg);
    }

    sub set {
        my ($self, %arg) = @_;
        foreach (keys %arg) {
            $self->{$_} = $arg{$_};
        }
        foreach (qw( old_width new_width )) {
            die "Option '$_' must set to a number, not " .
                (defined($self->{$_}) ? "'$self->{$_}'" : "undef") . "\n"
                    if ($self->{$_} // '') !~ /^\d+$/;
        }
        return $self;
    }

    sub output {
        my ($self, $change, $old_count, $new_count, $line) = @_;
        printf(
            "%$self->{old_width}s %$self->{new_width}s $self->{$change}%1s %s$self->{plain}\n",
            $old_count,
            $new_count,
            $change,
            $line,
        );
    }
}

##############################################################################

my %opt = (
    color => 1,
    all   => 0,
);

if (@ARGV != 2) {
    die "$NAME: Bad number of arguments\n",
        "Usage: $NAME FILE1 FILE2\n";
}

my @old = read_file shift;
my @new = read_file shift;

use Algorithm::Diff 'sdiff';
my @sdiff = sdiff(\@old, \@new);

my $out = Local::Output->new(
    old_width => length(scalar @old),
    new_width => length(scalar @new),
);

if ($opt{color}) {
    $out->set(
        '+'   => $GREEN,
        '-'   => $RED,
        plain => $PLAIN,
    );
}

my $line = 0;
my ($old, $new) = (1, 1);                      # line count
foreach (@sdiff) {
    my ($change, $oldline, $newline) = @$_;

    if ($change eq "u") {                      # unchanged
        if ($opt{all}) {
            $out->output("", $old, $new, $oldline);
        } elsif (!$line) {
            say "------------------------------";
            $line = 1;
        }
        $old += 1;
        $new += 1;
        next;
    }
    $line = 0;
    if ($change eq "c") {                      # changed
        $out->output("-", $old, "", $oldline);
        $out->output("+", "", $new, $newline);
        $old += 1;
        $new += 1;
    } elsif ($change eq "+") {                 # added
        $out->output("+", "", $new, $newline);
        $new += 1;
    } elsif ($change eq "-") {                 # removed
        $out->output("-", $old, "", $oldline);
        $old += 1;
    }
}

#[eof]
