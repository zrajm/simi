#!/usr/bin/env perl
# -*- ispell-dictionary: "american" -*-

##
## simi - show differences between two files, highlighting changes
## Copyright (C) 2014 zrajm <zrajm@zrajm.org>
##
## This program is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
##
## You should have received a copy of the GNU General Public License along
## with this program. If not, see <http://www.gnu.org/licenses/>.
##

package Local::Modulino; #[http://www.drdobbs.com/scripts-as-modules/184416165]
use warnings FATAL => 'all';
use strict;
use 5.10.0;

our $VERSION       = "0.4.1";
our $YEAR          = "2014";
our ($NAME)        = __FILE__ =~ m#([^/]+)$#mx;
our ($PLAIN, $RED, $GREEN) = ("\e[m", "\e[0;31m", "\e[0;32m");
our ($CYAN)        = ("\e[0;36m");
our ($MARKED_RED, $MARKED_GREEN) = ("\e[7;1m", "\e[7;1m");
our $USAGE = <<EOF;
Usage: $NAME [OPTION]... FILE1 FILE2
Show differences between two files, highlighting changes.
EOF

###############################################################################
##                                                                           ##
##  Informational Functions                                                  ##
##                                                                           ##
###############################################################################

sub version {
    local $, = "\n";
    say("$NAME $VERSION",
        "Copyright (C) $YEAR zrajm <zrajm\@zrajm.org>",
        "License GPLv3+: GNU GPL version 3 or later " .
            "<http://gnu.org/licenses/gpl.html>.",
        "This is free software: you are free to change and redistribute it.",
    );
    exit;
}

# Display '--help' information.
sub help {
    my ($longmax, @opt) = (0);
    local $_ = read_file(__FILE__);
    while (
        m{^ \s*
            (?:
                ['"] ([^'"]*) ['"] [^'"]*
            )?
            (?<![#]) [#]{3} (?![#]) \s* ([^\n]*)
        }mxg
    ) {
        my ($getopt, $desc) = ($1 // "", $2);
        my ($long, $short);
        foreach ($getopt) {
            $long  = /^[\w|-]*? \b ([\w-]{2,}) \b/msx ? "--$1" : "";
            $short = /^[\w|-]*? \b ( \w      ) \b/msx ?  "-$1" : "";
        }
        if ($long and $short) { $short .= "," }
        if ($desc =~ s/\A([A-Z]+)\s+//mx) { $long .= "=$1" }
        if (length($long) > $longmax) { $longmax = length($long) }
        push @opt, [$short, $long, $desc];
    }
    # FIXME: Usage should be from the 'NAME' and 'SYNOPSIS' sections of POD.
    #
    # use Pod::Text;
    # my $parser = Pod::Text->new();
    # $parser->parse_from_file(__FILE__);
    say $USAGE;
    say "Options:";
    foreach (@opt) {
        my ($short, $long, $desc) = @{ $_ };
        printf "  %-3s %-${longmax}s  %s\n", $short, $long, $desc;
    }
    say "";
    exit 0;
}

# Return random name for a tempfile. (File is not created.)
sub tempfile {
    package Local::tempfile;
    use File::Temp 'tmpnam';
    return tmpnam();
}

# Display documentation. Tries several different methods in order of decreasing
# excellence.
#
# First if, man(1) is installed, outputs a pretty manpage and displays that.
# Otherwise, attempts to set up less(1) as a filter to catch STDOUT, and
# displays a plain text version of the documentation. (If starting of less
# fails, you simply get the documentation printed as-is, probably overwhelming
# your terminal, but hopefully you can scroll back in your terminal, pipe it to
# a file or do something else really clever with it.)
sub man {
    # display using man(1) if available
    if (-x '/usr/bin/man'
            and eval { require Pod::Man; My::Module->import(); 1 }) {
        my $tempfile = tempfile;
        my $parser = Pod::Man->new (
            name    => $NAME,
            center  => "",
            release => $VERSION,
            utf8    => 1,
        )->parse_from_file(__FILE__, $tempfile);
        no warnings 'exec'; ## no critic (ProhibitNoWarnings)
        exec "man $tempfile";
    }

    # filter STDOUT through less(1) if available
    if (-x '/usr/bin/less') {
        no warnings 'exec'; ## no critic (ProhibitNoWarnings)
        open(STDOUT, '|-', 'less');
    }
    eval { require Pod::Text; My::Module->import(); 1 }
        or die "Cannot show documentation, failed to load 'Pod::Text'\n";
    Pod::Text->new->parse_from_file(__FILE__);
    close STDOUT;                              # tell less(1) STDOUT is done
    wait;                                      # wait until user exits less
    exit;
}

##############################################################################
##                                                                          ##
##  Functions                                                               ##
##                                                                          ##
##############################################################################

# Usage: getoptlong ARGLISTREF, [CALLBACKHASHREF,] OPTSPEC
#
# Process ARGLIST according to the OPTSPEC, and inserting the results into
# OPTHASH. Both OPTHASH and ARGLIST are changed by this process. This is a
# Getopt::Long wrapper, with clearer error messages.
#
#   * ARGLIST must be a literal array. This is a GNU-style command line, with
#     arguments and options. All options arguments in ARGLIST are removed as
#     they are processed, leaving only unprocessed arguments.
#
#   * OPTSPEC is passed as-is to the GetOptions() function of Getopt::Long.
#     And specifies which options to accept (see also 'man Getopt::Long').
#
# CALLBACKHASHREF if specified, inserts callbacks into OPTSPEC.
#
# OPTSPEC, may (all according to the Getopt::Long doc) start with a hash
# reference. If so, this reference may, instead of values contain callback
# functions to invoke instead of setting an argument.
#
# CALLBACKHASHREF is a hash, with functions as values. The function will be
# called with two arguments (invoked option name & option value) whenever the
# option is used. The function will be invoked without arguments when
# postprocessing the arguments -- when called with no argument it must return
# the current option value.
#
# Before invoking GetOptions() CALLBACKSREF are folded into the option hashref
# occurring as the first argument of OPTSPEC (if the first arg of OPTSPEC is
# not a hashref CALLBACKREFS are ignored). Afterwards the callbacks are
# removed from the options hash.
sub getoptlong {
    my ($arg, @opt_spec) = @_;
    package Local::get_options;

    my (%cb, $opt);
    # insert callbacks into option hashref
    if (ref($opt_spec[0]) eq "HASH" and ref($opt_spec[1]) eq "HASH") {
        %cb  = %{ shift @opt_spec };
        $opt = $opt_spec[0];
        @$opt{ keys %cb } = values %cb;
    }

    use Getopt::Long qw(
        GetOptionsFromArray :config
        posix_default bundling gnu_compat no_ignore_case permute
    );
    # Modify Getopt::Long's error messages:
    #   'Option <OPT> requires an argument' and 'Unknown option: <OPT>',
    #   should have "'--option'" or "'-o'" rather than just "option" or "o".
    local $SIG{__WARN__} = sub {
        local ($_) = @_;
        s{ \b (option[: ]+) ([-\w]+) }{
            my $x = length($2) == 1 ? '-' : '--';
            "$1'$x$2'";
        }mxie;
        warn "$NAME: $_";
    };
    # See: Getopt::Long(3pm) -- "Storing options values in a hash"
    my $ret = GetOptionsFromArray($arg, @opt_spec);

    # remove options callbacks (if existing)
    if (%cb) {
        delete @$opt{ grep  /^(?:no|ignore)-/mx, keys %cb };
        $opt->{$_} = $cb{$_}->()
            foreach   grep !/^(?:no|ignore)-/mx, keys %cb;
    }
    return $ret;
}

sub read_file {
    my ($file) = @_;
    open my $in, $file or die "Cannot open file '$file' for reading: $!\n";
    my @data = <$in>;
    close $in, $file or die "Cannot close file '$file' after reading: $!\n";
    return wantarray
        ? do { s#\r?\n\z##mx foreach @data; @data }
        : join "", @data;
}

# Usage: sdiff_hilite SDIFF
#
# Return list with suitable words highlighted. SDIFF is in the same format as
# the return value of Algorithm::Diff's sdiff().
sub sdiff_hilite {
    my ($oldnew, @diff) = @_;
    return join "", map {
        my ($c, $oldchar, $newchar) = @$_;
        if ($c eq "u") {
            $oldnew eq 'new' ? $newchar : $oldchar;
        } elsif ($c eq "+") {
            "$MARKED_GREEN$newchar$GREEN";
        } elsif ($c eq "-") {
            "$MARKED_RED$oldchar$RED";
        }
    } @diff;
}

# Usage: sdiff_merge SDIFF
#
# Process an Algorithm::Diff SDIFF array, and merge all consecutive elements
# with the same modifier indicator into one large element. Useful to construct
# larger blocks of all the elements with the same modifier indicator.
sub sdiff_merge {
    my (@sdiff) = @_;
    my @new_sdiff;
    foreach (@sdiff) {
        my $latest = $new_sdiff[$#new_sdiff] // [ "" ];
        my ($c, $old, $new) = @$_;
        if ($latest->[0] eq $c) {
            $latest->[1] .= $old;
            $latest->[2] .= $new;
        } else {
            push @new_sdiff, [ $c, $old, $new ];
        }
    }
    return @new_sdiff;
}

# Usage: sdiff_extract TYPE SDIFF
#
# SDIFF argument is an array-of-arrays, as returned by Algorithm::Diff's
# sdiff() function. Each element in SDIFF contains an array ref with a)
# modifier indicator ('u' - unchanged, 'c' - changed, '+' - added, or '-' -
# removed); b) a the old string from the diff and; c) the new string.
sub sdiff_extract {
    my ($modifier, @list) = @_;
    return map {
        my ($c, $old, $new) = @$_;
        $c =~ s#^c$#$modifier#mx;
        $c =~ m#^[u$modifier]$#mx ? [$c, $old, $new] : ();
    } @list;
}

# Usage: char_sdiff OLDLINE NEWLINE
#
# Splits OLDLINE and NEWLINE into characters, compares them using
# Algorithm::Diff's sdiff() function and return the result of that function.
sub char_sdiff {
    my ($oldline, $newline, $case_sensitive) = @_;
    use Algorithm::Diff 'sdiff';
    return sdiff(
        [ split "", $oldline ],
        [ split "", $newline ],
        $case_sensitive ? undef : sub { "\L$_[0]" },
    );
}

sub two_line_hilite {
    my ($oldline, $newline, $case_sensitive) = @_;
    my @diff = char_sdiff $oldline, $newline, $case_sensitive;
    $oldline = sdiff_hilite 'old', sdiff_merge sdiff_extract("-", @diff);
    $newline = sdiff_hilite 'new', sdiff_merge sdiff_extract("+", @diff);
    return ($oldline, $newline);
}

sub one_line_hilite {
    my ($oldline, $newline, $case_sensitive) = @_;
    my @diff = sdiff_merge char_sdiff $oldline, $newline, $case_sensitive;
    return join("", map {
        my ($c, $oldchar, $newchar) = @$_;
        if ($c eq "u") {
            $newchar;
        } elsif ($c eq "+") {
            "$GREEN$newchar$PLAIN";
        } elsif ($c eq "-") {
            "$RED$oldchar$PLAIN";
        } elsif ($c eq "c") {
            "$RED$oldchar$GREEN$newchar$PLAIN";
        }
    } @diff);
}

##############################################################################
##                                                                          ##
##  Output Formatting Module                                                ##
##                                                                          ##
##############################################################################

{
    package Local::Output;

    sub new {
        my ($class, %arg) = @_;
        return bless({
            '+'       => "",                   # ANSI terminal hilite strings
            '-'       => "",
            ""        => "",
            num_color => "",
            plain     => "",
            number    => 0,
        }, $class)->set(%arg);
    }

    sub set {
        my ($self, %arg) = @_;
        foreach (keys %arg) {
            $self->{$_} = $arg{$_};
        }
        foreach (qw( old_width new_width number )) {
            die "Option '$_' must set to a number, not " .
                (defined($self->{$_}) ? "'$self->{$_}'" : "undef") . "\n"
                    if ($self->{$_} // '') !~ m#^\d+$#mx;
        }
        return $self;
    }

    sub output {
        my ($self, $change, $old_count, $new_count, $line) = @_;
        my $hilite_color = $self->{$change} // "";
        return printf(
            "$self->{num_color}%$self->{old_width}s %$self->{new_width}s " .
                "$hilite_color%1s %s$self->{plain}\n",
            $old_count,
            $new_count,
            $change,
            $line,
        ) if $self->{number};
        return printf(
            "$self->{$change}%1s %s$self->{plain}\n",
            $change,
            $line,
        );
    }

    sub output_between_diffs {
        my ($self, $opt, $diff, $prev_i, $i, $old, $new) = @_;

        my $num = $i - $prev_i;
        return 1 if $num == 0;
        if (not $opt->{all}) {
            say "-" x 50;
            return 1;
        }

        my ($old_offset, $new_offset) = ($old - $num, $new - $num);

        foreach my $j (0 .. ($num - 1)) {
            my ($change, $oldline, $newline) = @{ $diff->[ $j + $prev_i ] };
            my ($old_count, $new_count) = ($j + $old_offset, $j + $new_offset);

            $self->output("", $old_count, $new_count, $oldline);
            die("Broken algorithm",
                "Lines OLD:$old_count NEW:$new_count are not the same\n",
                "    OLDLINE: $oldline\n",
                "    NEWLINE: $newline\n",
            ) if $oldline ne $newline;
        }
        return 1;
    }
}

##############################################################################
##                                                                          ##
##  Main                                                                    ##
##                                                                          ##
##############################################################################

# Usage: color_opt [ OPTNAME, OPTARG ]
#
# If called with OPTNAME and OPTARG arguments sets 'color' to true/false
# (depending on OPTARG), or if OPTARG is invalid, die()s with an informative
# message. When called without arguments return the last set 'color' value.
{
    my $color;
    sub color_opt {
        (my $opt, local $_) = @_ or  return $color // -t STDOUT ? 1 : 0;
        /^(yes|always|force)$/mx and return $color = 1;
        /^(no |never |none )$/mx and return $color = 0;
        /^(tty|if-tty|auto )$/mx and return $color = -t STDOUT ? 1 : 0;
        die "Invalid argument '$_' for option $opt\n",
            "Valid arguments are:\n",
                "    o 'always', 'yes', 'force'\n",
                "    o 'never', 'no', 'none'\n",
                "    o 'auto', 'tty', 'if-tty'\n";
    }
    sub color_opt_off { return $color = 0 }
    sub color_opt_set { return $color = shift(@_); }
}

sub run {
    my (undef, @arg) = @_;
    my %opt = (                                # default options
        all    => 0,
        mark   => 1,
        merge  => 0,
        number => 0,
        case_sensitive => 1,
    );
    my %cb = (                                 # option callbacks
        color         => \&color_opt,
        c             => sub { color_opt_set(1); $opt{mark} = 1 },
        "no-color"    => sub { color_opt_set(0); $opt{mark} = 0 },
        help          => sub { @_ and help      },
        "ignore-case" => sub { $opt{case_sensitive} = 0 },
        man           => sub { @_ and man       },
        version       => sub { @_ and version   },
        "no-mark"     => sub { $opt{mark}   = 0 },
        "no-number"   => sub { $opt{number} = 0 },
    );

    getoptlong(
        \@arg,                   # command line arguments
        \%cb,
        \%opt,                   # options hash
        'color|colour=s',        ### WHEN colorize the output; WHEN is 'always',
                                 ### 'never' or 'auto' (the default)
        'no-color|no-colour|C',  ### same as '--color=never'
        'c',                     ### same as '--color=always'
        'all|a',                 ### output all text (not just differing lines)
        'help|h|?',              ### display this help and exit
        'ignore-case|no-case|i', ### ignore case differences in file content
        'man',                   ### display program manpage and exit
        'mark|m',                ### enable sub-line diffs (default)
        'no-mark|M',             ### disable sub-line diffs
        'number|n',              ### show line numbers
        'no-number|N',           ### suppress line numbers (default)
        'merge|1',               ### show changed lines as one line
        'version|V',             ### output version information and exit
    ) or die "Try '$NAME --help' for more information.\n";
    if (@arg != 2) {
        die "$NAME: Bad number of filenames\n",
            "Usage: $NAME FILE1 FILE2\n";
    }

    my ($oldfile, $newfile) = @arg;
    use Algorithm::Diff 'sdiff';
    my @old   = read_file $oldfile;
    my @new   = read_file $newfile;
    my @sdiff = sdiff(
        \@old,
        \@new,
        $opt{case_sensitive} ? undef : sub { "\L$_[0]" },
    );
    my $out   = Local::Output->new(
        old_width => length(scalar @old),
        new_width => length(scalar @new),
        number    => $opt{number},
    );

    if ($opt{color}) {
        $out->set(
            '+'       => $GREEN,
            '-'       => $RED,
            num_color => $CYAN,
            plain     => $PLAIN,
        );
    }

    my ($old, $new)  = (1, 1);                 # line count
    my ($prev_i, $i) = (0, 0);

    foreach (@sdiff) {
        my ($change, $oldline, $newline) = @$_;
        if ($change eq "u") {                  # unchanged
            $old += 1;
            $new += 1;
        } elsif ($change eq "c") {             # changed
            if ($opt{merge}) {
                my ($line) = one_line_hilite($oldline, $newline, $opt{case_sensitive});
                $out->output_between_diffs(\%opt, \@sdiff, $prev_i, $i, $old, $new);
                $out->output("", $old, $new, $line);
            } else {
                ($oldline, $newline) = two_line_hilite($oldline, $newline, $opt{case_sensitive})
                    if $opt{mark};
                $out->output_between_diffs(\%opt, \@sdiff, $prev_i, $i, $old, $new);
                $out->output("-", $old, "", $oldline);
                $out->output("+", "", $new, $newline);
            }
            $old += 1;
            $new += 1;
            $prev_i = $i + 1;
        } elsif ($change eq "+") {             # added
            $out->output_between_diffs(\%opt, \@sdiff, $prev_i, $i, $old, $new);
            $out->output("+", "", $new, $newline);
            $new   += 1;
            $prev_i = $i + 1;
        } elsif ($change eq "-") {             # removed
            $out->output_between_diffs(\%opt, \@sdiff, $prev_i, $i, $old, $new);
            $out->output("-", $old, "", $oldline);
            $old   += 1;
            $prev_i = $i + 1;
        }
    } continue { $i += 1 }
    $out->output_between_diffs(\%opt, \@sdiff, $prev_i, $i, $old, $new);
    return;
}

# run after all globals etc. has been set up properly
__PACKAGE__->run(@ARGV) unless caller();

__END__

=head1 OPTIONS

=over 4

=item B<--color>=I<WHEN>

Show colored diff. B<--color> (i.e. without =I<WHEN>) is not allowed. I<WHEN>
can be one of C<always>, C<never>, or C<auto>.

=item B<--no-color>

Turn off colored diff. This can be used to override configuration settings. It
is the same as B<--color=never>.

=item B<-i>, B<--ignore-case>, B<--no-case>

Ignore case differences in file content.

Note that, when combined with option B<--merge>, the output will display only
the newer version of the text when there has been case changes.

=back

=cut

#[eof]
